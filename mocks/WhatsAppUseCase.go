// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "go_wa_rest/domain/entity"
	exceptions "go_wa_rest/pkg/exceptions"

	mock "github.com/stretchr/testify/mock"
)

// WhatsAppUseCase is an autogenerated mock type for the WhatsAppUseCase type
type WhatsAppUseCase struct {
	mock.Mock
}

// GetQr provides a mock function with given fields: ctx
func (_m *WhatsAppUseCase) GetQr(ctx context.Context) (string, int, *exceptions.CustomerError) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 int
	var r2 *exceptions.CustomerError
	if rf, ok := ret.Get(0).(func(context.Context) (string, int, *exceptions.CustomerError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) *exceptions.CustomerError); ok {
		r2 = rf(ctx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*exceptions.CustomerError)
		}
	}

	return r0, r1, r2
}

// GetQrV2 provides a mock function with given fields: ctx, jid
func (_m *WhatsAppUseCase) GetQrV2(ctx context.Context, jid string) (string, int, *exceptions.CustomerError) {
	ret := _m.Called(ctx, jid)

	var r0 string
	var r1 int
	var r2 *exceptions.CustomerError
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, int, *exceptions.CustomerError)); ok {
		return rf(ctx, jid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, jid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, jid)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) *exceptions.CustomerError); ok {
		r2 = rf(ctx, jid)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*exceptions.CustomerError)
		}
	}

	return r0, r1, r2
}

// Logout provides a mock function with given fields: ctx
func (_m *WhatsAppUseCase) Logout(ctx context.Context) *exceptions.CustomerError {
	ret := _m.Called(ctx)

	var r0 *exceptions.CustomerError
	if rf, ok := ret.Get(0).(func(context.Context) *exceptions.CustomerError); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exceptions.CustomerError)
		}
	}

	return r0
}

// LogoutV2 provides a mock function with given fields: ctx, jid
func (_m *WhatsAppUseCase) LogoutV2(ctx context.Context, jid string) *exceptions.CustomerError {
	ret := _m.Called(ctx, jid)

	var r0 *exceptions.CustomerError
	if rf, ok := ret.Get(0).(func(context.Context, string) *exceptions.CustomerError); ok {
		r0 = rf(ctx, jid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exceptions.CustomerError)
		}
	}

	return r0
}

// SendMessage provides a mock function with given fields: ctx, whatsApp
func (_m *WhatsAppUseCase) SendMessage(ctx context.Context, whatsApp *entity.WhatsApp) (*entity.WhatsApp, *exceptions.CustomerError) {
	ret := _m.Called(ctx, whatsApp)

	var r0 *entity.WhatsApp
	var r1 *exceptions.CustomerError
	if rf, ok := ret.Get(0).(func(context.Context, *entity.WhatsApp) (*entity.WhatsApp, *exceptions.CustomerError)); ok {
		return rf(ctx, whatsApp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.WhatsApp) *entity.WhatsApp); ok {
		r0 = rf(ctx, whatsApp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WhatsApp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.WhatsApp) *exceptions.CustomerError); ok {
		r1 = rf(ctx, whatsApp)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exceptions.CustomerError)
		}
	}

	return r0, r1
}

// SendMessageV2 provides a mock function with given fields: ctx, whatsApp, jid
func (_m *WhatsAppUseCase) SendMessageV2(ctx context.Context, whatsApp *entity.WhatsApp, jid string) (*entity.WhatsApp, *exceptions.CustomerError) {
	ret := _m.Called(ctx, whatsApp, jid)

	var r0 *entity.WhatsApp
	var r1 *exceptions.CustomerError
	if rf, ok := ret.Get(0).(func(context.Context, *entity.WhatsApp, string) (*entity.WhatsApp, *exceptions.CustomerError)); ok {
		return rf(ctx, whatsApp, jid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.WhatsApp, string) *entity.WhatsApp); ok {
		r0 = rf(ctx, whatsApp, jid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WhatsApp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.WhatsApp, string) *exceptions.CustomerError); ok {
		r1 = rf(ctx, whatsApp, jid)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exceptions.CustomerError)
		}
	}

	return r0, r1
}

// NewWhatsAppUseCase creates a new instance of WhatsAppUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWhatsAppUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *WhatsAppUseCase {
	mock := &WhatsAppUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
